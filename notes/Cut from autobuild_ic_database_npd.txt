# Find 'Core photo title' columns that do not contain two depth values separated by '-'
#filt = ~df_core_photo['Core photo title'].str.contains('-', regex=True)
#df_core_photo['Core photo title'][filt]

#filt = df_core_photo['Core photo title'].str.contains('Core|CORE', regex=True)
#print(df_core_photo[filt].shape)
#df_core_photo[filt].head()

#Result: 62 rows of data, e.g. Core photo title: 'Core1-1'

# df_core_photo = df_core_photo[~filt]
# df_core_photo.head()

# Single record 13326, well 35/11-9 has empty unit
# ['Core photo title'].loc[14234] = '2482-2483m'

# filt = df_core_photo['Wellbore' == '35/11-9']
# df_core_photo.loc[filt]

#filt_correction = df_core_photo['Wellbore'] == '35/11-9'
#df_core_photo.loc[filt_correction, 'Core photo title']

#TEMP
#df_core_photo.to_csv('checkunits.csv')

#TEMP
#df_core_photo[~filt]

# pat = '(\d{3,5})-(\d{3,5})(\D{1,2})'
    
# filt = df_core_photo['Core photo title'].str.extract(pat)
# #filt = df_core_photo['Core photo title'].str.contains(pat)

# #Check rows that match pattern
# df_core_photo[filt].head()

# test = [ x.split(',') for x in df_core_photo['Core photo title'].tolist() ]
# print(test)

#df_core_photo.to_csv('test1.csv')

# # Write a function to achieve the same thing:
 
# for index, row in df_core_photo.iterrows():
#         df_core_photo.loc[index, 'Top depth'] = row['Core photo title'].split(',')[0]
#         df_core_photo.loc[index, 'Base depth'] = row['Core photo title'].split(',')[1]
#         df_core_photo.loc[index, 'Unit'] = row['Core photo title'].split(',')[2]
        
# df_core_photo

# #df_core_photo[['Top depth', 'Base depth', 'Unit']] = pd.DataFrame([ x.split(',') for x in df_core_photo['Core photo title'].tolist() ])
# df_core_photo[['Top depth', 'Base depth', 'Unit']] = pd.DataFrame([ x.split(',') for x in df_core_photo['Core photo title'].tolist() ])

# df_core_photo.tail()

# #Output to file to check why some NaN values in Top depth, etc.
# tempfile = 'output data/temp.csv'
# df_core_photo.to_csv(tempfile, index=False)

# #Problem starts in middle of 9/2-1 records to bottom, 9/3-1. Over last 94 rows. And after 20756 successful rows.
# # NOTE SURE! COME BACK TO THIS!

#df_core_photo[df_core_photo['Core photo title'].isnull()]

#df_core_photo.dtypes
#df_core_photo['Top depth'] = df_core_photo['Top depth'].astype(int)

#df_core_photo[df_core_photo['Top depth']== 'Core1']

#name = url.split('/')[-1]