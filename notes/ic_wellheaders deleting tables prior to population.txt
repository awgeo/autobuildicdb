# Prior to import, ensure all data is deleted from necessary tables

# Select statement
stmt = select([func.count(wells.columns.name)])

# Execute the select statement and use the scalar() fetch method to save the record count
connection.execute(stmt).scalar()

# Delete all records from PROJECTWELLS table
delete_stmt = delete(projectwells)
result_proxy = connection.execute(delete_stmt)

# Delete all data from t_wellsuserfieldsvalues table first due to dependency
delete_stmt = delete(wellsuserfieldsvalues)
result_proxy = connection.execute(delete_stmt)

# Delete all records from WELLS table
delete_stmt = delete(wells)
result_proxy = connection.execute(delete_stmt)

# Print affected row count
result_proxy.rowcount

# Print results of the executing statement to verify there are no rows
print(connection.execute(stmt).fetchall())

# TO DO: Tried to turn the above into a function to avoid repetition but the sqlalchemy select statement doesn't accept parameters.
# See doc on https://stackoverflow.com/questions/19314342/python-sqlalchemy-pass-parameters-in-connection-execute